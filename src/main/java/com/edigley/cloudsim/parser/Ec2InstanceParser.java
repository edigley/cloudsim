/* Generated By:JavaCC: Do not edit this line. Ec2InstanceParser.java */
package com.edigley.cloudsim.parser;

import java.io.*;
import java.util.*;
import com.edigley.cloudsim.entities.*;
import com.edigley.oursim.entities.Processor;

public class Ec2InstanceParser implements Ec2InstanceParserConstants {

        List<EC2Instance> instances;
        List<EC2InstanceBadge> badges = new ArrayList<EC2InstanceBadge>();

        public static void main(String args[]) throws ParseException, Exception {
        Ec2InstanceParser parser = new Ec2InstanceParser(new FileInputStream(new File("resources/ec2_instances.txt")));
                try {
                        List<EC2Instance> result = parser.parse();
                        for(EC2Instance instance: result){
                                System.out.println(instance.type);
                        }
        } catch (Exception e) {
                System.out.println("NOK.");
                e.printStackTrace();
        } catch (Error e) {
                System.out.println("Oops.");
                e.printStackTrace();
        }
        }

        public static String removeQuotes(String arg) {
                return arg.replace("\u005c"","");
        }

        private static long parseSpeed(String field) {
                //6.5-ECU[2x3.25]
                int begin = field.indexOf("[") + 1;
                int end = field.lastIndexOf("]");
                String payload = field.substring(begin, end);
                int indexOfX = payload.indexOf("x");
                int numberOfCores = Integer.parseInt(payload.substring(0, indexOfX));
                double numberOfECUPerCore = Double.parseDouble(payload.substring(indexOfX+1, payload.length()));
                return Math.round((numberOfCores * numberOfECUPerCore) * Processor.EC2_COMPUTE_UNIT.getSpeed());
        }

        private static int getNumberOfCores(String field) {
                //6.5-ECU[2x3.25]
                int begin = field.indexOf("[") + 1;
                int end = field.lastIndexOf("]");
                String payload = field.substring(begin, end);
                int indexOfX = payload.indexOf("x");
                int numberOfCores = Integer.parseInt(payload.substring(0, indexOfX));
                return numberOfCores;
        }

        private static long getSpeedByCore(String field) {
                //6.5-ECU[2x3.25]
                int begin = field.indexOf("[") + 1;
                int end = field.lastIndexOf("]");
                String payload = field.substring(begin, end);
                int indexOfX = payload.indexOf("x");
                int numberOfCores = Integer.parseInt(payload.substring(0, indexOfX));
                double numberOfECUPerCore = Double.parseDouble(payload.substring(indexOfX+1, payload.length()));
                return Math.round(numberOfECUPerCore * Processor.EC2_COMPUTE_UNIT.getSpeed());
        }

  final public List<EC2Instance> parse() throws ParseException, Exception {
        instances = new ArrayList<EC2Instance>();
    label_1:
    while (true) {
      instance();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
        {if (true) return instances;}
    throw new Error("Missing return statement in function");
  }

  final public EC2Instance instance() throws ParseException {
        EC2Instance retorno = new EC2Instance();
        int numberOfCores;
        double numberOfECUPerCore;
        badges = new ArrayList<EC2InstanceBadge>();
        String speedField;
        int arch;
    //m1.small	1.7		1-ECU[1x1]		160		32	[ ( "US – N. Virginia", 0.085, 0.12), ( "US – N. California", 0.095, 0.13), ( "EU – Ireland", 0.095, 0.12), ( "APAC – Singapore", 0.095, 0.12) ]
            retorno.type = string_literal();
    retorno.memory = decimal();
    speedField = string_literal();
    retorno.storage = decimal();
    arch = integer();
    jj_consume_token(A_COLCHETE);
    label_2:
    while (true) {
      cpu();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(F_COLCHETE);
//		for (EC2InstanceBadge badge: badges){
//		}
                retorno.badges = badges;
                retorno.speed = parseSpeed(speedField);
                retorno.numCores =      getNumberOfCores(speedField);
                retorno.speedPerCore =   getSpeedByCore(speedField);
                retorno.arch = ""+arch;

                instances.add(retorno);
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public Processor cpu() throws ParseException {
        String region;
        String so;
        EC2InstanceBadge linux = new EC2InstanceBadge();
        EC2InstanceBadge windows = new EC2InstanceBadge();
    jj_consume_token(18);
    region = string_literal();
    jj_consume_token(19);
    linux.price = decimal();
    jj_consume_token(19);
    windows.price = decimal();
    jj_consume_token(20);
    jj_consume_token(19);
                linux.region = region;
                linux.so = "linux";
                windows.region = region;
                windows.so = "windows";
                badges.add(linux);
                badges.add(windows);
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public String value() throws ParseException {
        String returnValue;
    returnValue = jj_consume_token(VALUE).image;
        {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  final public int integer() throws ParseException {
        String returnValue;
    returnValue = jj_consume_token(INTEGER).image;
        {if (true) return Integer.parseInt(returnValue);}
    throw new Error("Missing return statement in function");
  }

  final public double decimal() throws ParseException {
        String returnValue = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case DECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        returnValue = jj_consume_token(INTEGER).image;
        break;
      case DECIMAL:
        returnValue = jj_consume_token(DECIMAL).image;
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return Double.parseDouble(returnValue);}
    throw new Error("Missing return statement in function");
  }

  final public String string_literal() throws ParseException {
        String returnValue;
    returnValue = jj_consume_token(STRING).image;
        {if (true) return removeQuotes(returnValue);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public Ec2InstanceParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x40000,0x600,0x600,};
   }

  /** Constructor with InputStream. */
  public Ec2InstanceParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Ec2InstanceParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Ec2InstanceParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Ec2InstanceParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Ec2InstanceParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Ec2InstanceParser(Ec2InstanceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Ec2InstanceParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
